package simpledb;
import java.util.*;

/**
 * Implements join operator other than EQUALS join.
 */
public class JoinOthers extends AbstractDbIterator {

    private JoinPredicate   _predicate;
    private DbIterator      _child1;
    private DbIterator      _child2;
    private Tuple           _t1;

    /**
     * Constructor.  Accepts to children to join and the predicate
     * to join them on
     *
     * @param p The predicate to use to join the children
     * @param child1 Iterator for the left(outer) relation to join
     * @param child2 Iterator for the right(inner) relation to join
     */
    public JoinOthers(JoinPredicate p, DbIterator child1, DbIterator child2) {
        _predicate  = p;
        _child1     = child1;
        _child2     = child2;
        _t1         = null;
    }

    /**
     * @see simpledb.TupleDesc#combine(TupleDesc, TupleDesc) for possible implementation logic.
     */
    public TupleDesc getTupleDesc() {
        return TupleDesc.combine(_child1.getTupleDesc(), _child2.getTupleDesc());
    }

    public void open()
        throws DbException, NoSuchElementException, TransactionAbortedException {
        _child1.open();
        _child2.open();
    }

    public void close() {
        _child1.close();
        _child2.close();
        _t1 = null;
    }

    public void rewind() throws DbException, TransactionAbortedException {
        _child1.rewind();
        _child2.rewind();
        _t1 = null;
    }

    /**
     * Returns the next tuple generated by the join, or null if there are no more tuples.
     * Logically, this is the next tuple in r1 cross r2 that satisfies the join
     * predicate.  There are many possible implementations; the simplest is a
     * nested loops join.
     * <p>
     * Note that the tuples returned from this particular implementation of
     * Join are simply the concatenation of joining tuples from the left and
     * right relation. Therefore, if an equality predicate is used 
     * there will be two copies of the join attribute
     * in the results.  (Removing such duplicate columns can be done with an
     * additional projection operator if needed.)
     * <p>
     * For example, if one tuple is {1,2,3} and the other tuple is {1,5,6},
     * joined on equality of the first column, then this returns {1,2,3,1,5,6}.
     *
     * @return The next matching tuple.
     * @see JoinPredicate#filter
     */
    protected Tuple readNext() throws TransactionAbortedException, DbException {

        Tuple t2;

        while (_t1 != null || _child1.hasNext()) {
            if (_t1 == null) _t1 = _child1.next();

            while (_child2.hasNext()) {
                t2 = _child2.next();
                if (_predicate.filter(_t1, t2))
                    return combine(_t1, t2);
            }

            _child2.rewind();
            _t1 = null;
        }

        return null;
    }

    private Tuple combine(Tuple t1, Tuple t2) {
        
        Tuple t = new Tuple(getTupleDesc());
        int numFields1 = _child1.getTupleDesc().numFields();
        int numFields2 = _child2.getTupleDesc().numFields();

        for (int i = 0; i < numFields1; i++)
            t.setField(i, t1.getField(i));
        for (int i = 0; i < numFields2; i++)
            t.setField(i + numFields1, t2.getField(i));

        return t;
    }
}
